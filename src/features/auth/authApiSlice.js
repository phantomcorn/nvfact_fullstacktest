import { apiSlice } from "../../app/api/apiSlice";
import { logout, setCredentials } from "./authSlice";
/*  
    We inject auth-related api here using the injectEndpoints function into our apiSlice
    This is useful for code splitting and readability
*/
export const authApiSlice = apiSlice.injectEndpoints({ //Any auth api is injected into our main api slice here
    endpoints: builder => ({ //Define endpoints that will be used by frontend

        login: builder.mutation({
            query: credentials => ({ //credentials (i.e username and password)
                url: '/api/auth',
                method: 'POST',
                body: {...credentials}
            })
        }),

        sendLogout: builder.mutation({
            query: () => ({
                url: '/api/auth/logout',
                method: 'POST'
            }),
            async onQueryStarted(arg, { dispatch, queryFulfilled }) {
                try {
                    await queryFulfilled
                    dispatch(logout()) //authSlice reducer
                    setTimeout(() => {dispatch(apiSlice.util.resetApiState())}, 1000) //clear out cache and query subscription
                } catch (err) {
                    console.log(err)
                }
            }
        }),

        refresh: builder.mutation({
            query: () => ({
                url: '/api/auth/refresh',
                method: "GET"
            }),
            async onQueryStarted(arg, {dispatch, queryFulfilled}) { //if query succesful, we automatically set our new state
                try {
                    const resp = await queryFulfilled
                    dispatch(setCredentials({token: resp.data.token}))
                } catch (err) {
                    console.log(err)
                }
            }
        }),

        register: builder.mutation({
            query: credentials => ({
                url: "/api/auth/create",
                method: "POST",
                body: {...credentials}
            })
        }),

        verifyEmail: builder.mutation({
            query: payload => ({
                url: "/api/auth/verify-email",
                method: "POST",
                body: {...payload}
            })
        })
    })
})

export const {//custom react hook auto-generated by RTK Query
    useRegisterMutation,
    useVerifyEmailMutation,
    useLoginMutation, 
    useSendLogoutMutation,
    useRefreshMutation
} = authApiSlice

